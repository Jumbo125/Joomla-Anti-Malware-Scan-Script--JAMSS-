<?php
    /**
    * JAMSS - Joomla! Anti-Malware Scan Script
    * @version 0.1.2
    * 
    * @author Bernard Toplak [WarpMax] <bernard@warpmax.com>
    * @link http://www.warpmax.com
    * 
    * This script should be used for searching the infected or malware/backdoor
    * files in Joomla! installations.
    * 
    * ALL COMMENTS AND SUGGESTIONS ARE WELCOME!
    * 
    * 
    * @license http://opensource.org/licenses/gpl-3.0.htmlďż˝GNUďż˝Publicďż˝License, version 3 (GPL-3.0)
    * This program is free software; you can redistribute it and/or modify it under 
    * the terms of the GNU General Public License as published by the Free Software
    * Foundation; either version 3 of the License, or (at your option) any later 
    * version.
    * 
    * This program is distributed in the hope that it will be useful, but WITHOUT
    * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
    * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for 
    * more details.
    * 
    */
    define('SCRIPT', 'JAMSS - Joomla! Anti-Malware Scan Script');
    define('VERSION', '0.1.2');
    define('NL', '<br/>');
    
    /* PHP Version Test*/
    if (PHP_MAJOR_VERSION < 5) {
        die( 'You have to run at least PHP 5 to run this script!');
    }
    
?>
<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title><?php echo SCRIPT,' v.',VERSION; ?></title>
        <style>
            .file {
                font-weight: bold;
                color: blue;
            }
            .pattern {
                font-weight: bold;
                color: red;
            }
            .pattern_desc {
                font-style: italic;
                color: blueviolet;
            }
            .offset {
                font-weight: bold;
                font-style: italic;
            }
            .end {
                font-size: 18px;
                font-weight: bold;
                color: cadetblue;
            }
        </style>
    </head>
    <body>
        <h1><?php echo SCRIPT,' v.',VERSION; ?></h1>
        <?php

        
        /* * * * * * * * * * * * * * *  SETTINGS  * * * * * * * * * * * * * * */
        ini_set('max_execution_time', '0'); // supress problems with timeouts
        ini_set('set_time_limit', '0'); // supress problems with timeouts
        ini_set('display_errors', '1'); // show/hide errors
        
        $fileExt = 'php|js|txt|html|htaccess' ; // file extensions, '|' separated
        $ignoreDirs = '.|..|.DS_Store|.svn|.git'; // dirnames to ignore
        
        $directory = '.'; // a directory to scan; default: current dir
        /* * * * * * * * * * * * * *  SETTINGS END  * * * * * * * * * * * * * */
        
        
        require_once 'jamssPatterns.php'; // load the patterns
        $patterns = array_merge($jamssPatterns, explode('|', $jamssStrings));
        $ext = explode('|', $fileExt);
                
        /* START benchmark */
        $before = microtime(true);
        
        $fileList = get_filelist($directory);
        //echo '<pre>',print_r($fileList,1),'<pre>';
        
        /* STOP benchmark */
        $after = microtime(true);
        echo 'Execution time of this scan was ', ($after-$before), ' sec! <br>';
        
        
        /**
         * Get the list of the files in rootdir and all subdirs<br>
         * 
         * @global string $ignoreDirs   directories to be ignored
         * @param string $dir   directory to scan for files
         * @return array    array with found files 
         */
        function get_filelist($dir) {
            global $ignoreDirs;
            $ignoreArr = explode('|', $ignoreDirs);
            
            $path = '';
            $toResolve = array($dir);
            while ($toResolve) {
                $thisDir = array_pop($toResolve);
                if ($dirContent = scandir($thisDir)) {
                    foreach ($dirContent As $content){
                        if (!in_array($content, $ignoreArr)) { // check paths, skiping ignored dirs
                            $thisFile = "$thisDir/$content";
                            if (is_file($thisFile)) {
                                $path[$thisFile] = md5_file($thisFile);
                                scan_file($thisFile);
                            } else {
                                $toResolve[] = $thisFile;
                            }
                        }
                    }
                }
            }
            return $path; 
        }
        
        
        /**
         * Scan given file for all malware patterns
         * 
         * @global string $fileExt  file extension list to be scanned
         * @global array $patterns array of patterns to search for
         * @param string $path  path of the scanned file
         */
        function scan_file($path) {
            global $ext, $patterns;
            $total_results = NULL;
            
            if ( in_array( pathinfo($path, PATHINFO_EXTENSION), $ext) && filesize($path)/*skip empty ones*/ && !stripos($path, 'jamssPatterns')/*skip patterns file*/ ) {
                
                if (!($content = file_get_contents($path))) {
                    echo("<p>Could not check $path</p>\n");
                } else { // do a search for fingerprints
                    foreach ($patterns As $pattern) {
                        if ( is_array($pattern) ) { // it's a pattern
                            preg_match_all('/'.$pattern[0].'/i', $content, $found, PREG_OFFSET_CAPTURE);
                        } else { // it's a string
                            preg_match_all('/'.$pattern.'/i', $content, $found, PREG_OFFSET_CAPTURE);
                        }                        
                        $all_results = $found[0]; // remove outer array from results
                        $results_count = count($all_results); // count the number of results
                        $total_results += $results_count; // total results of all fingerprints
                        if (!empty($all_results)) {
                            if ( is_array($pattern) ) { // then it has some additional comments
                                echo "<hr><p>In file <span class=\"file\">$path</span>",
                                        "-> we found $results_count occurence(s) of <span class=\"pattern\">Pattern #$pattern[2] - $pattern[1]</span><br/>",
                                        " ---> <strong>Details:</strong> <span class=\"pattern_desc\">\"$pattern[3]\"</span></p>\n";
                                foreach ($all_results as $match) {
                                    // output the line of malware code, but sanitize it before
                                    echo "<span class=\"offset\">@Offset: $match[1]</span>:",
                                            "<pre>... ". htmlentities(substr($content, $match[1], 200 ), ENT_QUOTES) ." ...</pre>\n"; 
                                }
                            } else { // it's a string, no comments available
                                echo "<hr><p>In file <span class=\"file\">$path</span>",
                                        "-> we found $results_count occurence(s) of <span class=\"pattern\">String '$pattern'</span><br/>";
                                foreach ($all_results as $match) {
                                    // output the line of malware code, but sanitize it before
                                    echo "<span class=\"offset\">@Offset: $match[1]</span>:",
                                            "<pre>... ". htmlentities(substr($content, $match[1], 200 ), ENT_QUOTES) ." ...</pre>\n"; 
                                }
                            }
                            
                        }
                    }
                    unset($content);
                }
            }
        }
        
        /*
        function fileHashCompare($fileList) {
            
        }
         * 
         */

        ?>
    </body>
</html>
